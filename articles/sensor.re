= センサーを活用したモニタリング

植物の生育状況を把握するためには、まずどんな環境で植物が育っているかを正確に把握し、過去からの変化に注意を払う必要があります。

この章ではCO2センサーを用いた値の取得方法とモニタリングについて解説します。

取得するだけではなく、一定の条件を超えた場合に通知をする方法についても紹介します。

概要を説明します。

用意する機器はSwitchBotから発売されているCO2センサーと、ハブミニです。CO2センサーはさまざまな製品が市場に出回っていますが、以下の理由からこの２つを選定しました。

- 現時点で今後も安定的に調達できる見通しである（レタス編で消化したセンサーが販売中止になったことを受けて、この点は非常に重視しています）
- 比較的安価である（安すぎると信頼性が低いですが、本書を手にする人には手軽に監視の楽しさと重要性に触れてほしいと思っています）
- クラウドにデータを飛ばすことができる（自宅でしか監視できませんだと、日中家にいない人や育成環境が自宅ではない人にとってあまり意味がありません）
- データの飛ばし方が容易（レタス編で紹介したセンサーでは、値の取得のためにラズベリーパイを必要とし、さらに認識させるためのコマンドの説明が必須で、プログラム初心者にはかなりハードルの高いものだったと反省しています）

センサーの値を取得するために作成するプログラムは、AWSというクラウドサービス上のLambdaというサービスを使って動かします。

そして、取得した値を確認するために、Mackerel（マカレル）という日本のはてな社が提供しているサービスを利用します。

全体の構成図を以下に示します。

TODO: Lambdaの利用料金
TODO: 概要図の作成

それでは見ていきましょう。

== 用意する機器

 * SwitchBot CO2センサー
 * SwitchBot ハブミニ
 ** Omronから発売されている 2JCIE-BU01（F1） という機種を使用します。
 ** これをラズパイにUSB接続します。ちなみに公式アプリをアプリストアからダウンロードすれば、特に何の設定もすることなく、スマホからデータの確認が可能です。@<fn>{end_of_service}

//image[omron_app1][アプリ画面その１][scale=0.5]
//image[omron_app2][アプリ画面その２][scale=0.5]
//footnote[raspberry_pi][原稿執筆段階でXXXX円]
//footnote[end_of_service][原稿執筆男系でXXXX円]

== 環境センサを使用するための準備

sbin。構成の再確認

=== 環境センサを使用するにあたっての初期設定

センサーとハブミニの両方に電力を供給し、電源をつけます。
SwitchBotの公式アプリを使用し、ハブミニにセンサーを認識させます。
ハブミニはWi-Fiに接続させておく必要があります。
詳細は機器購入時のマニュアルを参照してください。

CO2センサーは単体でも使用することはできますが、連携させることで、家の外から

ぶっちゃけアプリ上Co2濃度と温湿度などは確認できるので、LambdaとかMackerel難しい！って人はこれで終了でも大丈夫です。

ではなぜ

- 様々な形での通知が可能。
アプリが入っているスマホにプッシュ通知を送ることはできますが、自分以外にも通知をしたい、通知の手段としてメールやチャットサービスを使いたい、といったニーズもあります。
クラウドサービスと連携させることで、これらのニーズに応えることができます。
メールやSlackといったサービスを通して通知をすることが可能になるので、通知の自由度を高めることができます。

- 思い通りのダッシュボードを作成できる
アプリでの値の確認方法ですが、期間や表示形式はアプリ提供者の方法に従うしかありません。
あとアプリで確認すると若干遅い、という点がデメリットです。
マカレルでダッシュボードを自由に作成することで、これらのデメリットを解消することができ、監視の自由度が高まります。

以上でセンサーの準備は完了です。
上記の理由を読んで、面白そうだなやってみたい、と思った方はこのまま次の説明に取り掛かりましょう。

=== SwitchBot APIなどの取得

開発者モードに入り、
続いて機器のDeviceIDを取得します
TODO: DeviceIDチェッカー必要かも

== Lambdaを使ったセンサーの値の取得

AWSとは...という細かい説明はここではしませんが、ざっくり説明するとAmazonの子会社で、インターネットを使ったサービスに必要な機能を、自前でPCやサーバーなどの設備を購入することなく、仮想的に提供してくれる事業者、あるいはその事業者が提供するサービスの総称になります。

今ではクラウドサービスという名前で通っているこの分野の先駆者であるAWSを利用している企業・団体は数多く

AWSで何らかの障害が起きた時は、この国、ならずとも世界中のあらゆるサービスの根幹に関わるインフラになっています。

TODO: fn ちなみになぜAmazonがこんなサービスを始めたかというと、Amazonという巨大サービスを支えるインフラ環境を、障害に強く、かつ簡単に機能増強したり減らしたりするために社内のメンバーが仮想化技術を用いて裏プロジェクトとして開発したのがきっかけです。

先ほど多くの企業・団体に利用されていると書きましたが、個人での利用ももちろん可能で、筆者を含む多くの個人開発者がこのサービスを利用した開発に励んでいます。

前置きが長くなりましたが、ではAWSというサービスのLambdaとは何でしょうか？

Lambdaとはラムダと読みます。

ある特定の時間に動かしたいプログラムがある、だったりリクエストが来た時にだけ動かしたいプログラムがある場合、

サーバーを用意して、OSを選定して、といっためんどくさい設定を最小限に使えるこのLambdaは、利用時間や最小限に抑えることができ、金銭的コストやメンテナンスのメリットを最小限にしてくれるというメリットがあります。

=== AWSアカウントの取得

AWSアカウントの取得ですが、AWSが

細かい方法については、
なぜならAWSはしょっちゅうUIやボタン位置が変わって、画面のキャプチャを掲載しても数年後には役に立たない、ということが多いからです。

公式や検索して出てくる方法でアカウントを作成してください。
TODO：公式チュートリアル
TODO：カードいる？

途中カード情報の入力が求められます。本書の使用範囲であれば、無料枠で収まるはずですので特に心配はいらないですが、アカウント情報の漏洩には強く注意してください。

=== Mackerelの設定

アカウントを作成します。
APIの取得
TODO: あとなんかする？

=== Lambdaの設定

Zipをダウンロードして、解凍します。
その中にzipファイルがあるのを確認します。

もし内部に興味のある人がいたら、ソースコードも中に入っていますので覗いてみてください。

続いてAWSの画面に戻ります。検索画面に「Lambda」と入れてください
pyton,
環境変数

パッケージのアップロード

ここまでできたらテストを実行しましょう
画面にXXXと出たらOKです。あえて

もしそれ以外の結果が出たら、ここまでの手順を見直してください。

Mackerelの画面にいきましょう。
結果が１つしかないのでわかりにくいですが、次の画像のように、結果が確認できるはずです。

では、このプログラムが定期的に動くように設定しましょう

CRONで次のように設定します。

これで30分に一回、このプログラムが実行される設定が完了しました。

=== Mackerelでダッシュボードを作成する

これでセンサーの値をWeb上で確認できるようになりましたが、せっかくなので、値を見やすいグラフにしてまとめて表示させましょう

筆者はGrafanaにこんなダッシュボードを作成しています。
こうすれば、視覚的に今どうなっているのか把握しやすいですし、外出先でも簡単に生育環境の状況を確認することができます。

1.

2.

TODO: Grafanaダッシュボード用に、飛ばし方をかえる

== カメラによる監視

また、筆者はネットワークカメラとしてSwitchBot社製のものを使っていますが、ネットワークカメラを使うことで、リアルタイムの生育状況を出先から確認することができます。

//image[switchbot_camera][Switchbotのネットワークカメラで撮影した画像][scale=0.75]

このカメラで撮った写真を定期的にGooglePhotoに送ることができれば、簡単にタイムラプス動画が作成できるのに、と思っているのですが、うまい方法をまだ見つけられていません。

カメラについては試行錯誤中です。

//image[switchbot_and_raspberry_pi_camera][カメラについてはまだ検証中です][scale=0.75]
