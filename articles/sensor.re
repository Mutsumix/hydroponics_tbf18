= センサーを活用したモニタリング

植物の生育状況を把握するためには、まずどんな環境で植物が育っているかを正確に把握し、過去からの変化に注意を払う必要があります。

この章ではCO2センサーを用いた値の取得方法とモニタリングについて解説します。

取得するだけではなく、一定の条件を超えた場合に通知をする方法についても紹介します。

まずは概要を説明します。

用意する機器はSwitchBotから発売されているCO2センサーと、ハブミニです。CO2センサーはさまざまな製品が市場に出回っていますが、以下の理由からこの２つを選定しました。

 * 現時点で今後も安定的に調達できる見通しである（レタス編で紹介したセンサーが販売中止になったことを受けて、この点は非常に重視しています）
 * 比較的安価である（安すぎると品質に疑問がつきますが、本書を手にする人には手軽に監視の楽しさと重要性に触れてほしいと思っています）
 * クラウドにデータを飛ばすことができる（自宅でしか監視できませんだと、日中家にいない人や育成環境が自宅ではない人にとってあまり意味がありません）
 * データの飛ばし方が容易（レタス編で紹介したセンサーでは、値の取得のためにラズベリーパイを必要とし、さらにセンサーを認識させるためのコマンドの説明が必須で、プログラム初心者にはかなりハードルの高いものだったと反省しています）

センサーの値を取得するために作成するプログラムは、AWSというクラウドサービス上のLambdaというサービスを使って動かします。

そして、取得した値を確認するために、Mackerel（マカレル）という日本のはてな社が提供しているサービスを利用します。

全体の構成図を以下に示します。

//image[sensor/monitoring_overview.drawio][全体の構成図][scale=0.75]

それでは見ていきましょう。

== 用意する機器

 * SwitchBot CO2センサー（温湿度計）@<fn>{switchbot_co2_sensor}
 * SwitchBot ハブミニ@<fn>{switchbot_hub_mini}

TODO //CO2センターの画像
TODO // ハブミニの画像

//footnote[switchbot_co2_sensor][@<href>{https://www.switchbot.jp/products/switchbot-co2-meter, SwitchBot CO2センサー（温湿度計）}]
//footnote[switchbot_hub_mini][@<href>{https://www.switchbot.jp/products/switchbot-hub-mini, SwitchBot ハブミニ}]
//footnote[raspberry_pi][原稿執筆段階でXXXX円]
//footnote[end_of_service][原稿執筆男系でXXXX円]

=== CO2センサを使用するにあたっての初期設定

センサーとハブミニの両方に電力を供給し、電源をつけます。
SwitchBotの公式アプリを使用し、ハブミニにセンサーを認識させます（ハブミニはWi-Fiに接続させておく必要があります）。

詳細な手順は、機器のバージョンによって変わるので、機器購入時のマニュアルやSwitchBotの公式サイトを参照してください。@<fn>{switchbot_manual}

//footnote[switchbot_manual][@<href>{https://support.switch-bot.com/hc/ja/articles/20426539496727-%E6%B8%A9%E6%B9%BF%E5%BA%A6%E8%A8%88%E6%B8%A9%E6%B9%BF%E5%BA%A6%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E9%81%A0%E9%9A%94%E7%A2%BA%E8%AA%8D%E6%96%B9%E6%B3%95-%E3%83%8F%E3%83%96%E3%81%AB%E6%8E%A5%E7%B6%9A%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95, SwitchBot ハブミニ マニュアル}]

CO2センサーは単体でも使用することはできますが、連携させることで、家の外からのモニタリングが可能になります。

アプリ上でCO2濃度と温湿度などが確認できるので、この後紹介するLambdaとかMackerel難しい！って人はこれで終了でも大丈夫です。

ではなぜ、このような外部サービスを使った監視を行うのか、その理由を説明します。

 * 様々な形での通知が可能。
 アプリが入っているスマホにプッシュ通知を送ることはできますが、自分以外にも通知をしたい、通知の手段としてメールやチャットサービスを使いたい、といったニーズもあります。
クラウドサービスと連携させることで、これらのニーズに応えることができます。
メールやSlackといったサービスを通して通知をすることが可能になるので、通知の自由度を高めることができます。

 * 思い通りのダッシュボードを作成できる
アプリでの値の確認方法ですが、期間や表示形式はアプリ提供者の方法に従うしかありません。
またアプリで確認すると若干遅い、という点がデメリットです。
Mackerelでダッシュボードを自由に作成しブラウザにブックマークすることで、これらのデメリットを解消することができ、監視の自由度が高まります。

以上でセンサーの準備は完了です。上記の理由を読んで、面白そうだなやってみたい、と思った方はこのまま次の説明に取り掛かってください。

=== SwitchBot APIなどの取得

SwitchBotをAPIから操作する方法を説明します。

SwitchBotは、SwitchBot Hubを通してインターネットに接続されていることを前提としています。

==== 認証用トークンの取得

まずは、API認証用のトークンを取得します。
SwitchBotアプリの 設定 > 開発者向けオプション から確認可能です。
開発者向けオプション は、設定 > 基本データ の アプリバージョン を10回ほどタップすると表示されるようになります。

==== SwitchBotの設定

APIから操作するために、SwitchBotの「クラウドサービス」をオンにしてください（SwitchBotアプリV9.0から、クラウドサービスの項目自体が削除されていて、手動でオンにする必要がなくなりました）

==== APIから操作する

こちらのAPIドキュメントから詳細を確認できます。@<fn>{switchbot_api}

//footnote[switchbot_api][@<href>{https://github.com/OpenWonderLabs/SwitchBotAPI#switchbotapi, SwitchBot API}]

まずは、SwitchBotの deviceId を取得します。
Authorization には、最初に取得した認証用トークンを指定してください。

//emlist[curlコマンドでデバイス一覧を取得する][curlコマンドでデバイス一覧を取得する]{
curl --request GET 'https://api.switch-bot.com/v1.0/devices' \
  --header 'Authorization: 認証用トークン' \
  --header 'Content-Type: application/json; charset=utf8'
//}

下記のようなレスポンスが返ってくるので、SwitchBotの deviceId を確認してください。


//emlist[curlコマンドで取得したデバイス一覧][curlコマンドで取得したデバイス一覧]{
{
    "statusCode": 100,
    "body": {
        "deviceList": [
            {
                "deviceId": "D9A1DDFECB0F",
                "deviceName": "ハブ",
                "deviceType": "Hub Mini",
                "enableCloudService": true,
                "hubDeviceId": "000000000000"
            },
            {
                "deviceId": "B0E9FE533857",
                "deviceName": "CO2センサー",
                "deviceType": "MeterPro(CO2)",
                "enableCloudService": true,
                "hubDeviceId": "000000000000"
            }
        ],
        "infraredRemoteList": []
    },
    "message": "success"
}
//}

ここで取得したデバイス一覧の中から、CO2センサーの deviceId を確認してください。この deviceId を後ほどLambdaの環境変数に設定します。


== Lambdaを使ったセンサーの値の取得

AWSとは...という細かい説明はここではしませんが、ざっくり説明するとAmazonの子会社で、インターネットを使ったサービスに必要な機能を、自前でPCやサーバーなどの設備を購入することなく、仮想的に提供してくれる事業者、あるいはその事業者が提供するサービスの総称になります。

インターネットを使ったサービスに必要な機能を、自前でハードウェアを購入せずに仮想的に利用できるサービスの総称です。サーバー、ストレージ、データベース、ネットワーキングなど様々なクラウドサービスを提供しています。

#@# 今ではクラウドサービスという名前で通っているこの分野の先駆者であるAWSを利用している企業・団体は数多く

#@# AWSで何らかの障害が起きた時は、この国、ならずとも世界中のあらゆるサービスの根幹に関わるインフラになっています。

#@# TODO: fn ちなみになぜAmazonがこんなサービスを始めたかというと、Amazonという巨大サービスを支えるインフラ環境を、障害に強く、かつ簡単に機能増強したり減らしたりするために社内のメンバーが仮想化技術を用いて裏プロジェクトとして開発したのがきっかけです。

#@# 先ほど多くの企業・団体に利用されていると書きましたが、個人での利用ももちろん可能で、筆者を含む多くの個人開発者がこのサービスを利用した開発に励んでいます。

LambdaとはAWSのサービスの一つで、サーバーレスコンピューティングサービスです。簡単に言うと、サーバーの管理や設定をすることなく、プログラムコードを実行できるサービスです。必要な時だけ動作し、使った分だけ料金が発生するので、定期的なデータ取得のような用途に最適です。

=== AWSアカウントの取得

AWSアカウントの取得ですが、ここでは詳細には説明しません。@<fn>{aws_no_detail}公式のドキュメントを参照してください。@<fn>{aws_account_setup}

//footnote[aws_no_detail][AWSはしょっちゅうUIやボタン位置が変わって、画面のキャプチャを掲載しても数年後には役に立たない、ということが多いからです。]
//footnote[aws_account_setup][@<href>{https://aws.amazon.com/jp/register-flow/, AWSアカウントの作成方法}]

途中カード情報の入力が求められます。本書の使用範囲であれば、無料枠で収まるので特に心配はいらないですが、アカウント情報の漏洩には強く注意してください。

コンソールと呼ばれる設定画面が表示されれば、アカウントの作成は完了です。

TODO: コンソールの画面

=== Mackerelの設定

続いてMackerelのアカウント作成を行います。

Mackerelのサインアップ画面にアクセスします。@<fn>{mackerel_signup}

//footnote[mackerel_signup][@<href>{https://mackerel.io/signup, Mackerelのサインアップ画面}]

こちらはサインアップ時にカード情報の入力は不要なので、すぐにアカウントが作成できます。また、ソーシャルログインが可能なので、GoogleもしくはGitHubアカウントがある方は、そちらでサインアップすると良いでしょう。

続いてAPIを取得します。

ダッシュボードから「オーガニゼーション詳細」を選択肢、「APIキー」のタブを選択します。「新しいAPIキーを追加」を選択します。

名前はなんでも良いのですが、今回は「SwitchBot」という名前で作成します。

このように、APIキーが作成されるので、控えておきます。

=== 監視プログラムの設定

それでは、監視プログラムを作成します。

手順は次のとおりです。

 * GitHubから監視プログラムのソースコードを取得する
 * ソースコード内のZipファイルをAWSのLambdaにアップロードする
 * 環境変数を設定する
 * テストを実行し、結果を確認する
 * AWSのEventBridgeで定期的に実行するように設定する
 * Mackerelのダッシュボードを作成する

それでは順を追って説明します。

==== ソースコードの取得

GitHubから監視プログラムのソースコードを取得します。@<fn>{switchbot_co2_mackerel}

//footnote[switchbot_co2_mackerel][@<href>{https://github.com/Mutsumix/switchbot-co2-mackerel, 監視プログラムのソースコード}]

Zipファイルをダウンロードして、解凍します。

TODO: キャプチャ

Zipファイルを解凍すると、中にlambda.zipというファイルがあるので、これをLambdaにアップロードします。

使うのはこれだけですが、もし内部に興味のある人がいたら、ソースコードも中に入っていますので覗いてみてください。

GitやGitHubに慣れている人はクローンしてください、慣れているあなたには手順なんて不要です。

==== Lambdaへのアップロード

続いてAWSの画面に戻ります。検索画面に「Lambda」と入れてください
pyton,
パッケージのアップロード

==== 環境変数の設定
環境変数に以下の情報を設定します。

SWITCHBOT_TOKEN：SwitchBotの開発者向けオプションで「トークン」の項目で確認可能
SWITCHBOT_SECRET：SwitchBotの開発者向けオプションで「クライアントシークレット」の項目で確認可能
SWITCHBOT_DEVICE_ID：Curlコマンドで取得したCO2センサーの deviceId

MACKEREL_API_KEY
MACKEREL_SERVICE_NAME



ここまでできたらテストを実行しましょう
画面にXXXと出たらOKです。あえて

もしそれ以外の結果が出たら、ここまでの手順を見直してください。

Mackerelの画面にいきましょう。
結果が１つしかないのでわかりにくいですが、次の画像のように、結果が確認できるはずです。

では、このプログラムが定期的に動くように設定しましょう

CRONで次のように設定します。

これで30分に一回、このプログラムが実行される設定が完了しました。

=== Mackerelでダッシュボードを作成する

これでセンサーの値をWeb上で確認できるようになりましたが、せっかくなので、値を見やすいグラフにしてまとめて表示させましょう

筆者はGrafanaにこんなダッシュボードを作成しています。
こうすれば、視覚的に今どうなっているのか把握しやすいですし、外出先でも簡単に生育環境の状況を確認することができます。

このように指定します

1.

2.

TODO: Grafanaダッシュボード用に、飛ばし方をかえる

== カメラによる監視

また、筆者はネットワークカメラとしてSwitchBot社製のものを使っていますが、ネットワークカメラを使うことで、リアルタイムの生育状況を出先から確認することができます。

//image[switchbot_camera][Switchbotのネットワークカメラで撮影した画像][scale=0.75]

このカメラで撮った写真を定期的にGooglePhotoに送ることができれば、簡単にタイムラプス動画が作成できるのに、と思っているのですが、うまい方法をまだ見つけられていません。

カメラについては試行錯誤中です。

//image[switchbot_and_raspberry_pi_camera][カメラについてはまだ検証中です][scale=0.75]
